import React, { useMemo, useState } from 'react'
import { CellProps, useTable } from 'react-table'
import { QuestionCircleOutlined } from '@ant-design/icons'
import { Button, Col, DatePicker, Form, Row, Tabs, Tooltip } from 'antd'
import clsx from 'clsx'
import moment, { Moment } from 'moment'

import global_styles from '@/components/admin/css/admin.module.css'
import styles from '@/components/admin/pages/analytics/analytics.module.css'
import { doRequest } from '@/lib/Api'
import flattenInput from '@/lib/flattenInput'
import { getCellValueWithPercentage } from '@/lib/utils'
import { SharingReportKeys, SharingReportType } from '@/model/analyticsModel'
import type { FC } from '@/model/commonModel'

type InitialValues = {
  start: Moment | string
  end: Moment | string
}

type TableColumnValues = {
  [key: string]: string | number | JSX.Element
}

const AnalyticsSharing: FC = () => {
  const [isFormLoading, setFormLoading] = useState<boolean>(false)
  const [errors, setErrors] = useState<string[]>([])
  const [reportData, setReportData] = useState<SharingReportType>({} as SharingReportType)

  const initialFormValues: InitialValues = {
    start: '',
    end: moment().startOf('isoWeek'),
  }

  const disabledDateEnd = (current: Moment) => {
    return current && current.valueOf() >= moment().valueOf()
  }

  const onSubmit = async (values: InitialValues) => {
    const data = values
    if (data['start'] && typeof data['start'] !== 'string') {
      data['start'] = data['start'].format('YYYY-MM-DD')
    }
    if (data['end'] && typeof data['end'] !== 'string') {
      data['end'] = data['end'].format('YYYY-MM-DD')
    }

    setFormLoading(true)
    setErrors([])

    const response = await doRequest<SharingReportType, SharingReportType>({
      endpoint: process.env.NEXT_PUBLIC_API_POST_ANALYTICS_SHARING!,
      method: 'POST',
      data,
    })

    if (response._cc_errors.length) {
      const responseErrors = response._cc_errors.map((error) => (typeof error !== 'string' ? error.text : error))
      setErrors(responseErrors)
    } else {
      setReportData(response.data)
    }

    setFormLoading(false)
  }

  return (
    <>
      <p className={global_styles.h3}>Analytics of sharing rooms, events and clubs</p>

      <p>
        All information is collected from the application. This report analyzing user&apos;s activity in sharing from
        the application.
      </p>

      <div className={global_styles.mt_2}>
        <Form
          name='sharing'
          labelCol={{ span: 4 }}
          wrapperCol={{ span: 16 }}
          labelAlign='left'
          onFinish={onSubmit}
          initialValues={initialFormValues}
        >
          <Form.Item
            label={`Specify start date`}
            name='start'
            extra={
              'From this date the report will be generated. You can leave the field empty and the report will be generated by weeks'
            }
          >
            <DatePicker allowClear={true} format='YYYY-MM-DD' />
          </Form.Item>
          <Form.Item
            label={`Specify end date`}
            name='end'
            rules={[
              {
                required: true,
                message: 'Field is required',
              },
            ]}
          >
            <DatePicker allowClear={false} disabledDate={disabledDateEnd} format='YYYY-MM-DD' />
          </Form.Item>

          <Form.Item wrapperCol={{ span: 19 }} className={global_styles['mt-1']}>
            <Row>
              <Col span={16}>
                <Button type='primary' htmlType='submit' loading={isFormLoading}>
                  Create a report
                </Button>
              </Col>
            </Row>
            {errors.length > 0 && (
              <Row className={global_styles.error_text} dangerouslySetInnerHTML={{ __html: errors.join('<br />') }} />
            )}
          </Form.Item>
        </Form>
      </div>

      {reportData.share_event && (
        <>
          {Object.keys(reportData.share_event).length > 0 && (
            <Tabs
              tabBarExtraContent={{
                left: <h3 className={clsx(global_styles.h3, global_styles['mr-2'])}>Event sharing</h3>,
              }}
            >
              <Tabs.TabPane tab='Total' key='1'>
                <Table
                  interval={reportData.interval}
                  date={reportData.date}
                  data={reportData.share_event}
                  type={'share_event'}
                />
              </Tabs.TabPane>
              <Tabs.TabPane tab='Unique' key='2'>
                <Table
                  interval={reportData.interval}
                  date={reportData.date}
                  data={reportData.share_event}
                  type={'share_event'}
                  isUniqueData={true}
                />
              </Tabs.TabPane>
            </Tabs>
          )}
        </>
      )}

      {reportData.share_club && (
        <div className={clsx(global_styles.mt_3)}>
          {Object.keys(reportData.share_club).length > 0 && (
            <Tabs
              tabBarExtraContent={{
                left: <h3 className={clsx(global_styles.h3, global_styles['mr-2'])}>Club sharing</h3>,
              }}
            >
              <Tabs.TabPane tab='Total' key='1'>
                <Table
                  interval={reportData.interval}
                  date={reportData.date}
                  data={reportData.share_club}
                  type={'share_club'}
                />
              </Tabs.TabPane>
              <Tabs.TabPane tab='Unique' key='2'>
                <Table
                  interval={reportData.interval}
                  date={reportData.date}
                  data={reportData.share_club}
                  type={'share_club'}
                  isUniqueData={true}
                />
              </Tabs.TabPane>
            </Tabs>
          )}
        </div>
      )}

      {reportData.share_room && (
        <div className={clsx(global_styles.mt_3)}>
          {Object.keys(reportData.share_room).length > 0 && (
            <Tabs
              tabBarExtraContent={{
                left: <h3 className={clsx(global_styles.h3, global_styles['mr-2'])}>Room sharing</h3>,
              }}
            >
              <Tabs.TabPane tab='Total' key='1'>
                <Table
                  interval={reportData.interval}
                  date={reportData.date}
                  data={reportData.share_room}
                  type={'share_room'}
                />
              </Tabs.TabPane>
              <Tabs.TabPane tab='Unique' key='2'>
                <Table
                  interval={reportData.interval}
                  date={reportData.date}
                  data={reportData.share_room}
                  type={'share_room'}
                  isUniqueData={true}
                />
              </Tabs.TabPane>
            </Tabs>
          )}
        </div>
      )}
    </>
  )
}

const Table: FC<{
  interval: SharingReportType['interval']
  date: SharingReportType['date']
  data: SharingReportType['share_event'] | SharingReportType['share_club'] | SharingReportType['share_room']
  type: SharingReportKeys
  isUniqueData?: boolean
}> = ({ interval, date, data, type, isUniqueData = false }) => {
  const getColumns = useMemo(
    () => () => {
      const columns: Array<{
        Header: string
        accessor: string
        Cell?: (props: CellProps<TableColumnValues, number>) => JSX.Element
      }> = [
        {
          Header: '',
          accessor: 'name',
        },
      ]
      const format = interval === 'day' || interval === 'week' ? 'DD.MM' : 'MM.YYYY'
      const postfix = isUniqueData ? '_unique' : ''
      data.forEach((row, index) => {
        let header =
          moment(row.d).valueOf() < moment(date[0]).valueOf()
            ? moment(date[0]).format(format)
            : moment(row.d).format(format)
        if (interval !== 'day') {
          header += ` â€“ `
          if (data[index + 1]) {
            header += moment(data[index + 1].d).format(format)
          } else {
            header += moment(date[1]).format(format)
          }
        }
        columns.push({
          Header: header,
          accessor: `date${index}`,
          Cell: (props: CellProps<TableColumnValues, number>) => {
            return (
              <div className='nowrap'>
                {type === 'share_event' && (
                  <>
                    {props.row.index === 1 && (
                      <>
                        {(data as SharingReportType['share_event'])[index][`copy_link${postfix}`]}
                        {` `} + {data[index][`share_click${postfix}`]}
                        {` `} = {` `}
                      </>
                    )}
                    {props.row.index === 2 && (
                      <>
                        {data[index][`deeplink_open${postfix}`]}
                        {` `} + {(data as SharingReportType['share_event'])[index][`pageview${postfix}`]}
                        {` `} = {` `}
                      </>
                    )}
                  </>
                )}

                {type === 'share_club' && (
                  <>
                    {props.row.index === 2 && (
                      <>
                        {data[index][`deeplink_open${postfix}`]}
                        {` `} + {(data as SharingReportType['share_club'])[index][`pageview${postfix}`]}
                        {` `} = {` `}
                      </>
                    )}
                  </>
                )}

                {type === 'share_room' && (
                  <>
                    {props.row.index === 3 && (
                      <>
                        {data[index][`deeplink_open${postfix}`]}
                        {` `} + {(data as SharingReportType['share_room'])[index][`deeplink_install${postfix}`]}
                        {` `} = {` `}
                      </>
                    )}
                  </>
                )}

                {getCellValueWithPercentage(props.value, Number(data[index][`shown${postfix}`]))}
              </div>
            )
          },
        })
      })
      return columns
    },
    [interval, isUniqueData, data, date, type],
  )

  const columns = React.useMemo(() => getColumns(), [getColumns])

  const tableData = React.useMemo(
    () => getTableData(data, type, isUniqueData),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    flattenInput(data),
  )

  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({
    columns,
    data: tableData,
  })

  return (
    <>
      <table className={styles.table} {...getTableProps()}>
        <thead>
          {/*@ts-ignore*/}
          {headerGroups.map((headerGroup) => (
            // eslint-disable-next-line react/jsx-key
            <tr {...headerGroup.getHeaderGroupProps()}>
              {/*@ts-ignore*/}
              {headerGroup.headers.map((column) => (
                // @ts-ignore
                // eslint-disable-next-line react/jsx-key
                <th
                  {...column.getHeaderProps()}
                  // @ts-ignore
                  className={clsx(column.parent?.className)}
                >
                  {column.render('Header')}
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody {...getTableBodyProps()}>
          {rows.map((row) => {
            prepareRow(row)
            return (
              // eslint-disable-next-line react/jsx-key
              <tr {...row.getRowProps()}>
                {row.cells.map((cell) => {
                  return (
                    // eslint-disable-next-line react/jsx-key
                    <td
                      {...cell.getCellProps()}
                      // @ts-ignore
                      className={clsx(cell.column.parent?.className)}
                    >
                      {cell.render('Cell')}
                    </td>
                  )
                })}
              </tr>
            )
          })}
        </tbody>
      </table>
    </>
  )
}

const getTableData = (
  apiReportResult: SharingReportType['share_event'] | SharingReportType['share_club'] | SharingReportType['share_room'],
  type: SharingReportKeys,
  isUniqueData = false,
) => {
  let data: Array<TableColumnValues> = []
  const postfix = isUniqueData ? '_unique' : ''
  if (type === 'share_event') {
    data = [
      { name: 'Popup for sharing opened' },
      { name: 'Copy + Share = Shared' },
      {
        name: (
          <>
            Open deeplink + Pageview = Click
            <Tooltip
              title={
                "Don't be confused. Number of people, who clicked the link, may be more than people, who shared the link"
              }
            >
              <QuestionCircleOutlined
                style={{
                  marginLeft: '5px',
                  verticalAlign: 'middle',
                }}
              />
            </Tooltip>
          </>
        ),
      },
      { name: 'Registered' },
      { name: 'Verified' },
    ]
    ;(apiReportResult as SharingReportType['share_event']).forEach((row, index) => {
      data[0][`date${index}`] = Number(row[`shown${postfix}`])
      data[1][`date${index}`] = Number(row[`copy_link${postfix}`]) + Number(row[`share_click${postfix}`])
      data[2][`date${index}`] = Number(row[`deeplink_open${postfix}`]) + Number(row[`pageview${postfix}`])
      data[3][`date${index}`] = Number(row.registered)
      data[4][`date${index}`] = Number(row.verified)
    })
  } else if (type === 'share_club') {
    data = [
      { name: 'Club page opened' },
      { name: 'Tap on the share button' },
      {
        name: (
          <>
            Open deeplink + Pageview = Click
            <Tooltip
              title={
                "Don't be confused. Number of people, who clicked the link, may be more than people, who shared the link"
              }
            >
              <QuestionCircleOutlined
                style={{
                  marginLeft: '5px',
                  verticalAlign: 'middle',
                }}
              />
            </Tooltip>
          </>
        ),
      },
      { name: 'Registered' },
      { name: 'Verified' },
    ]
    ;(apiReportResult as SharingReportType['share_club']).forEach((row, index) => {
      data[0][`date${index}`] = Number(row[`shown${postfix}`])
      data[1][`date${index}`] = Number(row[`share_click${postfix}`])
      data[2][`date${index}`] = Number(row[`deeplink_open${postfix}`]) + Number(row[`pageview${postfix}`])
      data[3][`date${index}`] = Number(row.registered)
      data[4][`date${index}`] = Number(row.verified)
    })
  } else {
    data = [
      { name: 'Total people in the room' },
      { name: 'Tap on the plus icon' },
      { name: 'Tap on the share icon' },
      { name: 'Open deeplink + Install = Click' },
      { name: 'Registered' },
      { name: 'Verified' },
    ]
    ;(apiReportResult as SharingReportType['share_room']).forEach((row, index) => {
      data[0][`date${index}`] = Number(row[`shown${postfix}`])
      data[1][`date${index}`] = Number(row[`share_click${postfix}`])
      data[2][`date${index}`] = Number(row[`click_link${postfix}`])
      data[3][`date${index}`] = Number(row[`deeplink_open${postfix}`]) + Number(row[`deeplink_install${postfix}`])
      data[4][`date${index}`] = Number(row.registered)
      data[5][`date${index}`] = Number(row.verified)
    })
  }
  return data
}

export default AnalyticsSharing
